name: Build Middleware
description: Builds Middleware app docker image
inputs:
  project_name:
    description: 'Project name'
    required: true
  docker_registry_url:
    description: 'Docker registry url'
    required: false
    default: 'registry.vuestorefront.cloud'
  cloud_username:
    description: 'Cloud username'
    required: true
  cloud_password:
    description: 'Cloud password'
    required: true
  npm_email:
    description: 'NPM email'
    required: true
  npm_pass:
    description: 'NPM password'
    required: true
  npm_user:
    description: 'NPM user'
    required: true
  npm_registry:
    description: 'NPM registry'
    required: false
    default: 'https://registrynpm.storefrontcloud.io'
  version:
    description: 'Version of the app'
    required: false
  docker_buildargs:
    description: 'List of additional ENVs that should be passed at Docker image build-time'
    required: false
runs:
  using: "composite"
  steps:
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.docker_registry_url }}
        username: ${{ inputs.cloud_username }}
        password: ${{ inputs.cloud_password }}

    - name: Resolve docker buildargs
      id: resolve
      uses: actions/github-script@v7
      env:
        INPUT_NPM_EMAIL: ${{ inputs.npm_email }}
        INPUT_NPM_PASS: ${{ inputs.npm_pass }}
        INPUT_NPM_USER: ${{ inputs.npm_user }}
        INPUT_NPM_REGISTRY: ${{ inputs.npm_registry }}
        INPUT_DOCKER_BUILDARGS: ${{ inputs.docker_buildargs }}
        INPUT_VERSION: ${{ inputs.version }}
        INPUT_DOCKER_REGISTRY_URL: ${{ inputs.docker_registry_url }}
        INPUT_PROJECT_NAME: ${{ inputs.project_name }}
      with:
        script: |
          const base = {
            'NPM_EMAIL': core.getInput('npm_email'),
            'NPM_PASS': core.getInput('npm_pass'),
            'NPM_USER': core.getInput('npm_user'),
            'NPM_REGISTRY': core.getInput('npm_registry'),
          };

          const transformedBaseArgs = Object.entries(base)
            .map(([key, value]) => `${key}=${value}`);

          const extraBuildArgs = core.getMultilineInput('docker_buildargs', { required: false });
          const mergedBuildArgs = [
            ...transformedBaseArgs,
            ...extraBuildArgs,
          ];

          core.setOutput('docker_args', mergedBuildArgs);

          const versionInput = core.getInput('version');
          core.setOutput('version', versionInput || context.sha);

          core.setOutput('ref', `${core.getInput('docker_registry_url')}/${core.getInput('project_name')}-storefrontcloud-io`);

    - name: Check for existing image
      id: check-existing-image
      uses: javajawa/check-registry-for-image@9d8471656d5ab2ec94e8fee5b02c44cc7c3cff4b
      with:
        registry: ${{ inputs.docker_registry_url }}
        repository: ${{ inputs.project_name }}-storefrontcloud-io/vue-storefront-middleware
        tag: ${{ steps.resolve.outputs.version }}

    - name: Build and publish docker image
      uses: docker/build-push-action@v6
      if: ${{ steps.check-existing-image.outputs.exists == 'false' }}
      with:
        context: .
        file: .vuestorefrontcloud/docker/middleware/Dockerfile-middleware
        push: true
        tags: ${{ steps.resolve.outputs.ref }}/vue-storefront-middleware:${{ steps.resolve.outputs.version }}
        cache-from: "type=registry,ref=${{ steps.resolve.outputs.ref }}/vue-storefront-middleware:buildcache"
        cache-to: "type=registry,ref=${{ steps.resolve.outputs.ref }}/vue-storefront-middleware:buildcache,mode=max"
        build-args: ${{ fromJson(steps.resolve.outputs.docker_args) }}
